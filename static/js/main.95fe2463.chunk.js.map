{"version":3,"sources":["components/PaymentForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["PaymentForm","useState","formResults","setFormResults","required","value","undefined","mustBeString","match","mustBeNumber","isNaN","mustBeLength16","length","mustBeLength3","validateEmail","test","composeValidators","validators","reduce","error","validator","getInputClass","meta","classOfInput","classes","touched","className","onSubmit","values","form","result","JSON","stringify","prevState","restart","initialValues","render","handleSubmit","submitting","pristine","method","action","noValidate","name","validate","input","type","placeholder","id","autoComplete","maxLength","lang","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95fe2463.chunk.js","sourcesContent":["import {Form, Field} from \"react-final-form\";\r\nimport {useState} from \"react\";\r\nimport \"./PaymentForm.scss\";\r\n\r\nexport const PaymentForm = () => {\r\n    const [formResults, setFormResults] = useState(\"\");\r\n    const formData = {};\r\n    const onSubmit = (values, form) => {\r\n        let result = JSON.stringify(values, 0, 2);\r\n        setFormResults(prevState => prevState + result)\r\n        form.restart();\r\n    };\r\n\r\n    // Validators.\r\n    const required = (value) => (value ? undefined : \"Please fill out this field\");\r\n    const mustBeString = (value) => (value.match(/^[A-Za-z]+$/) ? undefined : \"Please input alphabet characters only\");\r\n    const mustBeNumber = (value) => (isNaN(value) ? \"Please input digits only\" : undefined);\r\n    const mustBeLength16 = (value) => ((value.length === 16) ? undefined : \"Must be 16 digits\");\r\n    const mustBeLength3 = (value) => ((value.length === 3) ? undefined : \"Must be 3 digits\");\r\n    const validateEmail = (value) => {\r\n        if (value) {\r\n            return (/\\S+@\\S+\\.\\S+/).test(value) ? undefined : \"Please input valid email (example: info@geniusee.com)\";\r\n        }\r\n    }\r\n    const composeValidators = (...validators) => (value) => {\r\n        return validators.reduce((error, validator) => error || validator(value), undefined);\r\n    }\r\n\r\n    // Classes.\r\n    const getInputClass = (meta, classOfInput = \"form-control\") => {\r\n        let classes = classOfInput;\r\n        if (meta.error && meta.touched) {\r\n            classes += ' is-invalid';\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    return (\r\n        <div className=\"vh-100 d-flex flex-column justify-content-center align-items-center\">\r\n            <div className=\"payment-form container col-md-6\">\r\n                <h2 className=\"payment-form__title\">Payment form</h2>\r\n                <Form\r\n                    onSubmit={onSubmit}\r\n                    initialValues={formData}\r\n                    render={({handleSubmit, form, submitting, pristine, values}) => (\r\n                        <form\r\n                            method=\"POST\"\r\n                            action=\"https://httpbin.org/post\"\r\n                            onSubmit={handleSubmit}\r\n                            className=\"row g-3 needs-validation payment-form__form\"\r\n                            noValidate\r\n                        >\r\n                            <Field\r\n                                name=\"firstName\"\r\n                                validate={composeValidators(required, mustBeString)}\r\n                            >\r\n                                {({input, meta}) => (\r\n                                    <div className=\"col-md-6\">\r\n                                        <label form=\"validationFirstName\" className=\"form-label\">First Name*</label>\r\n                                        <input\r\n                                            {...input} type=\"text\"\r\n                                            placeholder=\"First Name\"\r\n                                            className={getInputClass(meta)}\r\n                                            id=\"validationFirstName\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                        <div className=\"invalid-feedback\">{meta.error}</div>\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                            <Field\r\n                                name=\"lastName\"\r\n                                validate={composeValidators(required, mustBeString)}\r\n                            >\r\n                                {({input, meta}) => (\r\n                                    <div className=\"col-md-6\">\r\n                                        <label form=\"validationLastName\" className=\"form-label\">Last Name*</label>\r\n                                        <input\r\n                                            {...input} type=\"text\"\r\n                                            placeholder=\"Last Name\"\r\n                                            className={getInputClass(meta)}\r\n                                            id=\"validationLastName\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                        <div className=\"invalid-feedback\">{meta.error}</div>\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                            <Field\r\n                                name=\"country\"\r\n                                validate={composeValidators(required, mustBeString)}\r\n                            >\r\n                                {({input, meta}) => (\r\n                                    <div className=\"col-md-6\">\r\n                                        <label form=\"validationCountry\" className=\"form-label\">Country*</label>\r\n                                        <input\r\n                                            {...input} type=\"text\"\r\n                                            placeholder=\"Country\"\r\n                                            className={getInputClass(meta)}\r\n                                            id=\"validationCountry\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                        <div className=\"invalid-feedback\">{meta.error}</div>\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                            <Field\r\n                                name=\"address\"\r\n                                validate={composeValidators(required)}\r\n                            >\r\n                                {({input, meta}) => (\r\n                                    <div className=\"col-md-6\">\r\n                                        <label form=\"validationAddress\" className=\"form-label\">Address*</label>\r\n                                        <input\r\n                                            {...input} type=\"text\"\r\n                                            placeholder=\"Address\"\r\n                                            className={getInputClass(meta)}\r\n                                            id=\"validationAddress\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                        <div className=\"invalid-feedback\">{meta.error}</div>\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                            <Field\r\n                                name=\"creditCard\"\r\n                                validate={composeValidators(required, mustBeNumber, mustBeLength16)}\r\n                            >\r\n                                {({input, meta}) => (\r\n                                    <div className=\"col-md-10\">\r\n                                        <label form=\"validationCreditCard\" className=\"form-label\">Credit Card*</label>\r\n                                        <input\r\n                                            {...input} type=\"text\"\r\n                                            maxLength=\"16\"\r\n                                            placeholder=\"XXXX XXXX XXXX XXXX\"\r\n                                            className={getInputClass(meta)}\r\n                                            id=\"validationCreditCard\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                        <div className=\"invalid-feedback\">{meta.error}</div>\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                            <Field\r\n                                name=\"cvv2Code\"\r\n                                validate={composeValidators(required, mustBeNumber, mustBeLength3)}\r\n                            >\r\n                                {({input, meta}) => (\r\n                                    <div className=\"col-md-2\">\r\n                                        <label form=\"validationCvv2Code\" className=\"form-label\">CVV2*</label>\r\n                                        <input\r\n                                            {...input} type=\"password\"\r\n                                            maxLength=\"3\"\r\n                                            placeholder=\"CVV2\"\r\n                                            className={getInputClass(meta)}\r\n                                            id=\"validationCvv2Code\"\r\n                                            autoComplete=\"off\"\r\n                                        />\r\n                                        <div className=\"invalid-feedback\">{meta.error}</div>\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                            <Field\r\n                                name=\"email\"\r\n                                validate={validateEmail}\r\n                            >\r\n                                {({input, meta}) => (\r\n                                    <div className=\"col-md-12\">\r\n                                        <label form=\"validationEmail\" className=\"form-label\">Email for a receipt</label>\r\n                                        <input\r\n                                            {...input} type=\"text\"\r\n                                            placeholder=\"Email\"\r\n                                            className={getInputClass(meta)}\r\n                                            id=\"validationEmail\"\r\n                                        />\r\n                                        <div className=\"invalid-feedback\">{meta.error}</div>\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                            <Field\r\n                                name=\"agreement\"\r\n                                validate={required}\r\n                                type=\"checkbox\"\r\n                            >\r\n                                {({input, meta}) => (\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"form-check\">\r\n                                            <label form=\"validationAgreement\" className=\"form-check-label\">\r\n                                                <input\r\n                                                    {...input}\r\n                                                    type=\"checkbox\"\r\n                                                    value=\"\"\r\n                                                    className={getInputClass(meta, \"form-check-input\")}\r\n                                                    id=\"validationAgreement\"\r\n                                                />\r\n                                                Agree with terms of use*\r\n                                                <div className=\"invalid-feedback\">You must agree before\r\n                                                    submitting.</div>\r\n                                            </label>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n\r\n                            <div className=\"d-grid gap-2 text-align-center\">\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"btn btn-success payment-form__submit\"\r\n                                >\r\n                                    Pay\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                />\r\n            </div>\r\n            {formResults && (\r\n                <div className=\"form-results container col-md-6\">\r\n                    <code lang=\"json\" className=\"form-results__code\">\r\n                        Results: {formResults}\r\n                    </code>\r\n                </div>\r\n            )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import { PaymentForm } from \"./components/PaymentForm\";\n\nfunction App() {\n  return (\n      <PaymentForm />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}